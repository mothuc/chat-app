{"ast":null,"code":"var _jsxFileName = \"D:\\\\Chat\\\\src\\\\pages\\\\Register.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Add from \"../img/addAvatar.png\";\nimport { createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { auth, storage } from \"../firebase\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Register() {\n  _s();\n\n  const [err, setErr] = useState(false);\n\n  const handleOnSubmit = async e => {\n    e.preventDefault();\n    const displayName = e.target[0].value;\n    const email = e.target[1].value;\n    const password = e.target[2].value;\n    const file = e.target[3].files[0];\n\n    try {\n      const res = await createUserWithEmailAndPassword(auth, email, password);\n      const storageRef = ref(storage, displayName);\n      const uploadTask = uploadBytesResumable(storageRef, file); // Register three observers:\n      // 1. 'state_changed' observer, called any time the state changes\n      // 2. Error observer, called on failure\n      // 3. Completion observer, called on successful completion\n\n      uploadTask.on(\"state_changed\", snapshot => {\n        // Observe state change events such as progress, pause, and resume\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        console.log(\"Upload is \" + progress + \"% done\");\n\n        switch (snapshot.state) {\n          case \"paused\":\n            console.log(\"Upload is paused\");\n            break;\n\n          case \"running\":\n            console.log(\"Upload is running\");\n            break;\n        }\n      }, error => {// Handle unsuccessful uploads\n      }, () => {\n        // Handle successful uploads on complete\n        // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n        getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n          console.log(\"File available at\", downloadURL);\n        });\n      });\n    } catch {\n      setErr(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"formContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"formWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"logo\",\n        children: \"Chat App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"title\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleOnSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"display name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"passwordd\",\n          placeholder: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          style: {\n            display: \"none\"\n          },\n          id: \"file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"file\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: Add,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Add an avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Sign up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), err && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Something went wrong\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You do have an account? \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Register, \"4f/TxW+LdGGAPzcwGwavGh8Z84w=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["D:/Chat/src/pages/Register.jsx"],"names":["React","useState","Add","createUserWithEmailAndPassword","auth","storage","ref","uploadBytesResumable","getDownloadURL","Register","err","setErr","handleOnSubmit","e","preventDefault","displayName","target","value","email","password","file","files","res","storageRef","uploadTask","on","snapshot","progress","bytesTransferred","totalBytes","console","log","state","error","then","downloadURL","display"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Add from \"../img/addAvatar.png\";\r\nimport { createUserWithEmailAndPassword } from \"firebase/auth\";\r\nimport { auth, storage } from \"../firebase\";\r\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\n\r\nfunction Register() {\r\n  const [err, setErr] = useState(false);\r\n  const handleOnSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const displayName = e.target[0].value;\r\n    const email = e.target[1].value;\r\n    const password = e.target[2].value;\r\n    const file = e.target[3].files[0];\r\n\r\n    try {\r\n      const res = await createUserWithEmailAndPassword(auth, email, password);\r\n\r\n      const storageRef = ref(storage, displayName);\r\n\r\n      const uploadTask = uploadBytesResumable(storageRef, file);\r\n\r\n      // Register three observers:\r\n      // 1. 'state_changed' observer, called any time the state changes\r\n      // 2. Error observer, called on failure\r\n      // 3. Completion observer, called on successful completion\r\n      uploadTask.on(\r\n        \"state_changed\",\r\n        (snapshot) => {\r\n          // Observe state change events such as progress, pause, and resume\r\n          // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n          console.log(\"Upload is \" + progress + \"% done\");\r\n          switch (snapshot.state) {\r\n            case \"paused\":\r\n              console.log(\"Upload is paused\");\r\n              break;\r\n            case \"running\":\r\n              console.log(\"Upload is running\");\r\n              break;\r\n          }\r\n        },\r\n        (error) => {\r\n          // Handle unsuccessful uploads\r\n        },\r\n        () => {\r\n          // Handle successful uploads on complete\r\n          // For instance, get the download URL: https://firebasestorage.googleapis.com/...\r\n          getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n            console.log(\"File available at\", downloadURL);\r\n          });\r\n        }\r\n      );\r\n    } catch {\r\n      setErr(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"formContainer\">\r\n      <div className=\"formWrapper\">\r\n        <span className=\"logo\">Chat App</span>\r\n        <span className=\"title\">Register</span>\r\n        <form onSubmit={handleOnSubmit}>\r\n          <input type=\"text\" placeholder=\"display name\" />\r\n          <input type=\"email\" placeholder=\"email\" />\r\n          <input type=\"passwordd\" placeholder=\"password\" />\r\n          <input type=\"file\" style={{ display: \"none\" }} id=\"file\" />\r\n          <label htmlFor=\"file\">\r\n            <img src={Add} alt=\"\" />\r\n            <span>Add an avatar</span>\r\n          </label>\r\n          <button>Sign up</button>\r\n          {err && <span>Something went wrong</span>}\r\n        </form>\r\n        <p>\r\n          You do have an account? <span>Login</span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n"]},"metadata":{},"sourceType":"module"}